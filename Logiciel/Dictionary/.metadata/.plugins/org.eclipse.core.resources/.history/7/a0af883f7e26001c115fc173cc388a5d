package Dictionary;

import java.util.Arrays;
import java.lang.Math;

public class FastDictionary extends AbstractDictionary {

	public FastDictionary(int n) {
		super(n);
		// TODO Auto-generated constructor stub
	}
	@Override
	public int size() {
		return this.size();
	}
	@Override
	int indexOf(Object key) {
		int pos = Math.abs(key.hashCode()) % size; 
		while ( pos < size) {
			if (!keys[pos].equals(key))
				pos++;
			else
				return pos;
		}
		return -1;
	}
	@Override
	int newIndexOf(Object key) {
		// TODO Auto-generated method stub
		return 0;
	}
	
	private boolean mustGrow() {
		return (3/4)*this.keys.length <= this.size();
	}
	private void grow() {
		Object[] tamponKeys =  Arrays.copyOf(keys, size);
		Object[] tamponValeurs =  Arrays.copyOf(valeurs, size);
		this.keys = new Object[2*size];
		this.valeurs = new Object[2*size];
		for (int i = 0; i < size; i++) {
			this.put(tamponKeys[i], tamponValeurs[i]);
		}
		size = size*2;
		
	}

}
